{"ast":null,"code":"var _jsxFileName = \"/Users/danielaramos/Documents/GitHub/tradingchatbot/frontend/chat/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [question, setQuestion] = useState(\"\");\n  const [answer, setAnswer] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const askQuestion = async () => {\n    if (!question.trim()) return;\n    setLoading(true);\n    setAnswer(\"\");\n    try {\n      const res = await fetch(\"http://localhost:5000/ask\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          question\n        })\n      });\n      const data = await res.json();\n      if (data.error) {\n        setAnswer(\"Error: \" + data.error);\n      } else {\n        setAnswer(data.answer);\n      }\n    } catch (err) {\n      setAnswer(\"Failed to connect to the backend.\");\n    }\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      maxWidth: 600,\n      margin: \"2rem auto\",\n      textAlign: \"left\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Trading AI Chatbot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      rows: 3,\n      placeholder: \"Ask a question about your trading data...\",\n      value: question,\n      onChange: e => setQuestion(e.target.value),\n      style: {\n        width: \"100%\",\n        padding: \"10px\",\n        fontSize: \"16px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: askQuestion,\n      disabled: loading,\n      style: {\n        marginTop: 12,\n        padding: \"8px 16px\"\n      },\n      children: loading ? \"Thinking...\" : \"Ask\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 20,\n        background: \"#f9f9f9\",\n        padding: \"12px\",\n        borderRadius: \"6px\",\n        minHeight: 100\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Answer:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          whiteSpace: \"pre-wrap\"\n        },\n        children: answer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"87qyu6KJvHB3AxzGtj+jfHDxSWI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","question","setQuestion","answer","setAnswer","loading","setLoading","askQuestion","trim","res","fetch","method","headers","body","JSON","stringify","data","json","error","err","className","style","maxWidth","margin","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","rows","placeholder","value","onChange","e","target","width","padding","fontSize","onClick","disabled","marginTop","background","borderRadius","minHeight","whiteSpace","_c","$RefreshReg$"],"sources":["/Users/danielaramos/Documents/GitHub/tradingchatbot/frontend/chat/src/App.js"],"sourcesContent":["\nimport React, { useState } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [question, setQuestion] = useState(\"\");\n  const [answer, setAnswer] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const askQuestion = async () => {\n    if (!question.trim()) return;\n    setLoading(true);\n    setAnswer(\"\");\n\n    try {\n      const res = await fetch(\"http://localhost:5000/ask\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ question }),\n      });\n\n      const data = await res.json();\n      if (data.error) {\n        setAnswer(\"Error: \" + data.error);\n      } else {\n        setAnswer(data.answer);\n      }\n    } catch (err) {\n      setAnswer(\"Failed to connect to the backend.\");\n    }\n\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"App\" style={{ maxWidth: 600, margin: \"2rem auto\", textAlign: \"left\" }}>\n      <h1>Trading AI Chatbot</h1>\n      <textarea\n        rows={3}\n        placeholder=\"Ask a question about your trading data...\"\n        value={question}\n        onChange={(e) => setQuestion(e.target.value)}\n        style={{ width: \"100%\", padding: \"10px\", fontSize: \"16px\" }}\n      />\n      <button onClick={askQuestion} disabled={loading} style={{ marginTop: 12, padding: \"8px 16px\" }}>\n        {loading ? \"Thinking...\" : \"Ask\"}\n      </button>\n      <div style={{ marginTop: 20, background: \"#f9f9f9\", padding: \"12px\", borderRadius: \"6px\", minHeight: 100 }}>\n        <strong>Answer:</strong>\n        <p style={{ whiteSpace: \"pre-wrap\" }}>{answer}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}